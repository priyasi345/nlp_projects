# -*- coding: utf-8 -*-
"""text_gen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aFdKATz1vLVYyX5AHePX0RAthI_uut2s
"""

import string
from keras.preprocessing.text import Tokenizer
from keras.utils import to_categorical
from nltk.tokenize import word_tokenize

from google.colab import files
uploaded = files.upload()

file = open('pre.txt', 'r',encoding="ISO-8859-1")
text=file.read()
file.close()

text

def clean_doc(doc):
    '''this function is used to clean the data'''
    
    clean_words= []

    words = word_tokenize(text)
    for word in words:
        word = word.strip(string.punctuation)
        if len(word)>=1 and word.isdigit()==False:
                word = word.lower()
                clean_words.append(word)
    return clean_words

import nltk
nltk.download('punkt')

token=clean_doc(text)
token[0]

sequence_len=21
seq=[]
for i in range(0,len(token)-sequence_len):
    seq.append(token[i:i+sequence_len])

tokenizer = Tokenizer()
tokenizer.fit_on_texts(seq) 
tokenizer

'''giving a numerical value for each token'''
sequence = tokenizer.texts_to_sequences(seq) 
sequence[0]

'''check the index no of each token'''
tokenizer.word_index

'''Total vocab size'''
vocab_size = len(tokenizer.word_index) + 1
vocab_size

import numpy as np
arr=np.array(sequence)

X, Y = arr[:,:-1], arr[:,-1]
Y.shape

Y=to_categorical(Y,num_classes=vocab_size) 
Y.shape

seq_length = X.shape[1]

from keras.models import Sequential
from keras.layers import Dense,LSTM,Embedding

model = Sequential()
model.add(Embedding(vocab_size, 150, input_length=seq_length))
model.add(LSTM(1024, return_sequences=True))
model.add(LSTM(1024))
model.add(Dense(1024, activation='relu'))
model.add(Dense(vocab_size, activation='softmax'))
print(model.summary())

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(X, Y, batch_size=80, epochs=150)

from random import randint
from keras.preprocessing.sequence import pad_sequences


'''Give seed text as input to generate the whole sequence'''
seed_text="well prince so genoa and lucca are now just family estates of the buonapartes but i warn you if you"

def generate_seq(model,tokenizer,seq_length,seed_text,n_words):
    '''This function generates the output sequence'''
    
    result = []
    in_text =seed_text
    for i in range(n_words):
        encoded = tokenizer.texts_to_sequences([in_text])[0]
        encoded = pad_sequences([encoded], maxlen=seq_length, truncating='pre')
        yhat = model.predict_classes(encoded)
        out_word = ''
        for word,index in tokenizer.word_index.items():
            if index==yhat:
                out_word = word
                break
        in_text+=' ' + out_word
        result.append(word)
    return ' '.join(result)

'''It will print the next 30 words based on the seed text(testing data)'''

generated = generate_seq(model, tokenizer, seq_length, seed_text, 30)
print(generated)

## slow net therefore stopped training in between